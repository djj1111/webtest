<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.djj.test">
        <!--以下配置排除@Controller注解-->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--<aop:aspectj-autoproxy/>-->

    <!-- 引入项目配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:datasource.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>
        </property>
    </bean>
    <!-- 配置数据源 -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:9701/test?useSSL=true&amp;verifyServerCertificate=false"/>
        <property name="username" value="user"/>
        <property name="password" value="1111"/>
    </bean>-->
    <!-- 配置druid数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库连接基础信息 -->
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="10"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="150"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="1"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 验证数据库连接有效性，要求查询语句 -->
        <property name="validationQuery" value="${validationQuery}"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->
        <property name="testOnReturn" value="false"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 当数据库抛出一些不可恢复的异常时，抛弃连接,null为自动识别-->
        <!--设为null,必须这样写-->
        <property name="exceptionSorter">
            <null/>
        </property>

        <!-- &lt;!&ndash; 对于长时间不使用的连接强制关闭 &ndash;&gt;
         <property name="removeAbandoned" value="true"/>
         &lt;!&ndash; 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 &ndash;&gt;
         <property name="removeAbandonedTimeout" value="1800"/>
         &lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;
         <property name="logAbandoned" value="true"/>-->

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="mergeStat" /> -->
        <property name="filters" value="config,stat"/>
        <!--加密密码-->
        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publickey}"/>
    </bean>

    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!--增加cache配置-->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
                </prop>
                <!--在hibernate.cfg.xml中配置ehcache.xml的位置,例如：-->
                <!--<property name="cache.provider_configuration_file_resource_path">config/hibernate/ehcache/ehcache.xml</property>-->
                <prop key="cache.provider_configuration_file_resource_path">classpath*:ehcache.xml</prop>

            </props>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>com.djj.test.entity.File</value>
                <value>com.djj.test.entity.BlobFile</value>
            </list>
        </property>

    </bean>

    <!-- 配置一个事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务，使用代理的方式，适配第二种方式 -->
    <!--<bean id="transactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>-->

    <!-- 第一种配置事务的方式 ，tx-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" isolation="REPEATABLE_READ"
                       timeout="5"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" isolation="REPEATABLE_READ"
                       timeout="5"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" isolation="REPEATABLE_READ"
                       timeout="5"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" isolation="REPEATABLE_READ"
                       timeout="5"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="5"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="5"/>
        </tx:attributes>
    </tx:advice>


    <aop:config>
        <aop:pointcut id="serviceMethod" expression="execution(* com.djj.test.service.*Impl.*(..))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice"/>
    </aop:config>

    <!--配置上传-->
    <!--使用DiskFileItemFactory、ServletFileUpload不用以下配置，以下只能单文件上传-->
    <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         &lt;!&ndash;上传文件最大值&ndash;&gt;
         <property name="maxUploadSize" value="1000000000"/>
         &lt;!&ndash;请求包最大值&ndash;&gt;
         &lt;!&ndash;<property name="MAX_REQUEST_SIZE" value="1000000000"/>&ndash;&gt;
         <property name="defaultEncoding" value="UTF-8"/>
         <property name="uploadTempDir" value="fileupload/temp"/>
     </bean>-->
</beans>